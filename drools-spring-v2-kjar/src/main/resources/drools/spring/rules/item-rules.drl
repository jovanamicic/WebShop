package drools.spring.rules
import drools.spring.example.model.Item;
import drools.spring.example.model.Bill;
import drools.spring.example.model.DiscountItem;
import drools.spring.example.model.Action;
import drools.spring.example.model.ProductCategory;

import java.util.List;

global List<Bill> inLast15DaysBills;
global List<Bill> inLast30DaysBills;
global List<Action> actions;

//Kreiraj osnovni popust od 10% za stavku ukoliko se u njoj naručuje više od 20 artikla,
//a artikal ne pripada kategoriji široke potrošnje.
rule "Rule a)"
	agenda-group "discountItem"
    when
        $i: Item( quantity > 20 , product.productCategory.consumerGoods == false)
    then
    	DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(true);
    	discount.setDiscount(10);
    	$i.getDiscountsItems().add(discount);
end

//Kreiraj osnovni popust od 5% za stavku ukoliko se u njoj naručuje više od 5 artikla,
//a artikal pripada kategoriji televizori, računari ili laptopovi.
rule "Rule b)"
	agenda-group "discountItem"
    when
        $i: Item((quantity > 5) && (product.productCategory.name == "TV" || product.productCategory.name == "PC" || product.productCategory.name == "laptop"))
    then
    	DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(true);
    	discount.setDiscount(5);
    	$i.getDiscountsItems().add(discount);
end

//Kreiraj osnovni popust od 7% za stavku ukoliko ukupna naručena vrednost stavke prelazi
// 5000 din i ukoliko njen artikal pripada kategoriji široke potrošnje.
rule "Rule c)"
	agenda-group "discountItem"
    when
        $i: Item( originalPrice > 5000, product.productCategory.consumerGoods == true)
    then
    	DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(true);
    	discount.setDiscount(7);
    	$i.getDiscountsItems().add(discount);
end

//Kreiraj dodatni popust od 2% za stavku ukoliko je artikal iz stavke već kupovan u prethodnih 15 dana.
rule "Rule d)"
	agenda-group "discountItem"
    when
        $i: Item()
		  Boolean( booleanValue ) 
		     from accumulate( Bill( $qs: items) from inLast15DaysBills,
		     init( boolean hasDiscount = false),
		     action( for( Object q: $qs )
		               if( $i.getProduct().getId() == (((Item)q).getProduct().getId())) hasDiscount = true;
		               else hasDiscount = false;  ),
		     result( hasDiscount == true ) )
    then
    	DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(false);
    	discount.setDiscount(2);
    	$i.getDiscountsItems().add(discount);
end

//Kreiraj dodatni popust od 1% za stavku ukoliko su proizvodi iz kategorije tog artikla kupovani u prethodnih 30 dana.
rule "Rule e)"
	agenda-group "discountItem"
    when
		$i: Item()
		  Boolean( booleanValue ) 
		     from accumulate( Bill( $qs: items) from inLast30DaysBills,
		     init( boolean hasDiscount = false),
		     action( for( Object q: $qs )
		               if( $i.getProduct().getProductCategory().getId() == (((Item)q).getProduct().getProductCategory().getId())) hasDiscount = true;
		               else hasDiscount = false;  ),
		     result( hasDiscount == true ) )
    then
    	DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(false);
    	discount.setDiscount(1);
    	$i.getDiscountsItems().add(discount);
end

//Ukoliko datum narudžbenice pripada nekom vremenskom periodu akcijskog događaja i ukoliko za artikal iz stavke njegova
//kategorija pripada listi kategorija za koje se akcijski događaj definiše, tada kreiraj dodatni popust za stavku.
//Visina dodatnog popusta se preuzima iz akcijskog događaja.
rule "Rule f)"
   agenda-group "discountItem"
    when
	$i: Item()
	  Boolean( booleanValue ) 
	     from accumulate( Action( $cat: categories) from actions,
	     init( boolean hasDiscount = false),
	     action( for( Object obj: $cat )
	               if( $i.getProduct().getProductCategory().getId() == (((ProductCategory)obj).getId())) hasDiscount = true;
	               else hasDiscount = false; ),
	     result( hasDiscount == true) )
    then
		DiscountItem discount = new DiscountItem();
    	discount.setBill($i.getBill());
    	discount.setItem($i);
    	discount.setBasic(false);
    	discount.setDiscount(5);
    	$i.getDiscountsItems().add(discount);    	
end